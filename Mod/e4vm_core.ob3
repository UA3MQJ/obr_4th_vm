MODULE e4vm_core;
IMPORT SYSTEM, C := Console, Platform, B := Basic, e4vm_type, e4vm_utils;

(*# нет операции *)
PROCEDURE do_nop* (VAR v: e4vm_type.x4thPtr);
BEGIN
  (* C.WriteStrLn("nop"); *)
END do_nop;

(*# Каждое пользовательское слово начинается с команды DoList,
  # задача которой — сохранить текущий адрес интерпретации на стеке
  # и установить адрес интерпретации следующего слова. *)
PROCEDURE do_list* (VAR v: e4vm_type.x4thPtr);
VAR next_ip : INTEGER;
BEGIN
  (* C.WriteStrLn("do_list"); *)
	v.rs[v.rs_p] := v.ip; v.rs_p := v.rs_p + 1;
	v.ip := v.wp + 1;
END do_list;


(*# Суть интерпретации заключается в переходе
  # по адресу в памяти и в исполнении инструкции,
  # которая там указана.
  # Останавливаемся, если адрес 0 *)
PROCEDURE do_next* (VAR v: e4vm_type.x4thPtr);
VAR word_index: INTEGER;
BEGIN
  (* C.WriteStrLn("do_next"); *)
  (* Останавливаемся, если адрес 0 *)
	WHILE ~(v.ip=0) DO
	  v.wp := v.mem[v.ip];
	  v.ip := v.ip + 1;
	  word_index:=v.mem[v.wp];
  	v.words[word_index].proc(@v);
	END;
END do_next;


(* команда для выхода из слова
   восстанавливает адрес указателя инструкций IP со стека возвратов RS *)
PROCEDURE do_exit* (VAR v: e4vm_type.x4thPtr);
BEGIN
  (* C.WriteStrLn("do_exit"); *)
	v.rs_p := v.rs_p - 1;
	v.ip := v.rs[v.rs_p];
END do_exit;


PROCEDURE add_core_words* (VAR v: e4vm_type.x4thPtr);
BEGIN
  e4vm_utils.add_core_word(@v, "nop",    do_nop,  FALSE);
  e4vm_utils.add_core_word(@v, "dolist", do_list, FALSE);
  e4vm_utils.add_core_word(@v, "next",   do_next, FALSE);
  e4vm_utils.add_core_word(@v, "exit",   do_exit, FALSE);
END add_core_words;


BEGIN
   
	
END e4vm_core.