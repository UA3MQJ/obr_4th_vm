MODULE e4vm_boolean;
IMPORT SYSTEM, C := Console, Platform, B := Basic, e4vm_type, e4vm_utils;

(* true *)
PROCEDURE true* (VAR v: e4vm_type.x4thPtr);
BEGIN 
  C.WriteStrLn("true");
  v.ds[v.ds_p] := e4vm_utils.true_const(@v);
  v.ds_p := v.ds_p + 1;
END true;

(* false *)
PROCEDURE false* (VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStrLn("false");
  v.ds[v.ds_p] := e4vm_utils.false_const(@v);
  v.ds_p := v.ds_p + 1;
END false;

(* not
работает только с логическими значениями, в отличие от invert *)
PROCEDURE not* (VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStrLn("not");
  IF (v.ds[v.ds_p - 1] = e4vm_utils.true_const(@v)) THEN
    v.ds[v.ds_p - 1] := e4vm_utils.false_const(@v)
	ELSE 
	  IF (v.ds[v.ds_p - 1] = e4vm_utils.false_const(@v)) THEN 
	    v.ds[v.ds_p - 1] := e4vm_utils.true_const(@v)
	  ELSE
	    C.WriteStrLn("not logical");
	  END
	END
END not;

(* invert *)
PROCEDURE- BitwiseNot (value: e4vm_type.stack_type): e4vm_type.stack_type "(~(value))";

PROCEDURE invert* (VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStrLn("invert");
  v.ds[v.ds_p -1] := BitwiseNot(v.ds[v.ds_p -1]);
END invert;


(* or *)
PROCEDURE- BitwiseOR (val1, val2: e4vm_type.stack_type): e4vm_type.stack_type "((val1 | val2))";

PROCEDURE or* (VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStrLn("or");
  v.ds[v.ds_p - 2] := BitwiseOR(v.ds[v.ds_p - 2], v.ds[v.ds_p - 1]);
  v.ds_p := v.ds_p - 1;
END or;

(* and *)
PROCEDURE- BitwiseAND (val1, val2: e4vm_type.stack_type): e4vm_type.stack_type "((val1 & val2))";

PROCEDURE and* (VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStrLn("and");
  v.ds[v.ds_p - 2] := BitwiseAND(v.ds[v.ds_p - 2], v.ds[v.ds_p - 1]);
  v.ds_p := v.ds_p - 1;
END and;

(* xor *)
PROCEDURE- BitwiseXOR (val1, val2: e4vm_type.stack_type): e4vm_type.stack_type "((val1 ^ val2))";

PROCEDURE xor* (VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStrLn("xor");
  v.ds[v.ds_p - 2] := BitwiseXOR(v.ds[v.ds_p - 2], v.ds[v.ds_p - 1]);
  v.ds_p := v.ds_p - 1;
END xor;

(* eql =*)
PROCEDURE eql* (VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStrLn("eql");

  IF (v.ds[v.ds_p - 2] = v.ds[v.ds_p - 1]) 
	THEN v.ds[v.ds_p - 2] := e4vm_utils.true_const(@v)
	ELSE v.ds[v.ds_p - 2] := e4vm_utils.false_const(@v) END;

  v.ds_p := v.ds_p - 1;
END eql;

(* not_eql <>*)
PROCEDURE not_eql* (VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStrLn("not_eql");
  IF ~(v.ds[v.ds_p - 2] = v.ds[v.ds_p - 1])
	THEN v.ds[v.ds_p - 2] := e4vm_utils.true_const(@v)
	ELSE v.ds[v.ds_p - 2] := e4vm_utils.false_const(@v) END;

  v.ds_p := v.ds_p - 1;
END not_eql;

(* less <*)
PROCEDURE less* (VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStrLn("less");
  IF (v.ds[v.ds_p - 2] < v.ds[v.ds_p - 1])
	THEN v.ds[v.ds_p - 2] := e4vm_utils.true_const(@v)
	ELSE v.ds[v.ds_p - 2] := e4vm_utils.false_const(@v) END;

  v.ds_p := v.ds_p - 1;
END less;

(* greater >*)
PROCEDURE greater* (VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStrLn("greater");
  IF (v.ds[v.ds_p - 2] > v.ds[v.ds_p - 1])
	THEN v.ds[v.ds_p - 2] := e4vm_utils.true_const(@v)
	ELSE v.ds[v.ds_p - 2] := e4vm_utils.false_const(@v) END;

  v.ds_p := v.ds_p - 1;
END greater;

(* less_eql <=*)
PROCEDURE less_eql* (VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStrLn("less_eql");
  IF (v.ds[v.ds_p - 2] <= v.ds[v.ds_p - 1])
	THEN v.ds[v.ds_p - 2] := e4vm_utils.true_const(@v)
	ELSE v.ds[v.ds_p - 2] := e4vm_utils.false_const(@v) END;

  v.ds_p := v.ds_p - 1;
END less_eql;

(* greater_eql >*)
PROCEDURE greater_eql* (VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStrLn("greater_eql");
  IF (v.ds[v.ds_p - 2] >= v.ds[v.ds_p - 1])
	THEN v.ds[v.ds_p - 2] := e4vm_utils.true_const(@v)
	ELSE v.ds[v.ds_p - 2] := e4vm_utils.false_const(@v) END;

  v.ds_p := v.ds_p - 1;
END greater_eql;

BEGIN
   
	
END e4vm_boolean.