MODULE e4vm_core_ext;
IMPORT SYSTEM, C := Console, Platform, B := Basic,

e4vm_type, e4vm_utils, e4vm_core;

(*# нет операции *)
PROCEDURE quit* (VAR v: e4vm_type.x4thPtr);
BEGIN
  (* B.Quit; *) (* вроде бы не работает*)
END quit;


(*# Чтобы при интерпретации отличить числовую константу от адреса слова,
  # при компиляции перед каждой константой компилируется вызов слова doLit,
  # которое считывает следующее значение в памяти и размещает его на стеке данных.*)
PROCEDURE do_lit* (VAR v: e4vm_type.x4thPtr);
BEGIN
  (* C.WriteStrLn("do_lit!"); *)
  e4vm_utils.stack_ds_push(@v, v.mem[v.ip]);  
  v.ip := v.ip + 1;
END do_lit;


(*# поместит в стек данных адрес hereP.*)
PROCEDURE get_here_addr* (VAR v: e4vm_type.x4thPtr);
BEGIN
  e4vm_utils.stack_ds_push(@v, v.hereP);
END get_here_addr;


(*# Reserve data space for one cell and store w in the space.
  # просто положит в ячейку на hereP++ число из стека *)
PROCEDURE comma* (VAR v: e4vm_type.x4thPtr);
BEGIN
  (* C.WriteStrLn("comma"); *)
  v.ds_p := v.ds_p - 1;
	e4vm_utils.add_op(@v, v.ds[v.ds_p]);
END comma;

(*# переход по адресу в следующей ячейке *)
PROCEDURE branch* (VAR v: e4vm_type.x4thPtr);
BEGIN
 v.ip := v.mem[v.ip];
END branch;

(*# переход по адресу, если в топ ds 0. то есть false.
  # false - это все биты в ноле. true - это все биты одной ячейки(cell) в единице. *)
PROCEDURE zbranch* (VAR v: e4vm_type.x4thPtr);
BEGIN
  v.ds_p := v.ds_p - 1;
  IF v.ds[v.ds_p] = 0 THEN
    v.ip := v.mem[v.ip];
  ELSE
    v.ip := v.ip;
  END
END zbranch;

(* # войти в eval режим - eval = true *)
PROCEDURE lbrac* (VAR v: e4vm_type.x4thPtr);
BEGIN
  v.is_eval_mode := TRUE;
END lbrac;

(* # выйти из eval режима - eval = false *)
PROCEDURE rbrac* (VAR v: e4vm_type.x4thPtr);
BEGIN
  v.is_eval_mode := FALSE;
END rbrac;

(* # делаем последнее определенное слово immediate = true *)
PROCEDURE immediate* (VAR v: e4vm_type.x4thPtr);
BEGIN
	v.words[v.words_count - 1].immediate := TRUE;
END immediate;

(*# выполнить слово по указанному адресу*)
PROCEDURE execute_addr* (
  VAR v: e4vm_type.x4thPtr;
  word_address : e4vm_type.word_addr_type
);
VAR word_idx:INTEGER;
BEGIN
  word_idx := e4vm_utils.look_up_word_idx_by_address(@v, word_address);
  (* если слова нет в словаре - значит оно интерпретируется *)
  IF word_idx = -1 THEN
    v.ip := 0; v.wp := word_address;
    e4vm_core.do_list(@v);
    e4vm_core.do_next(@v);
  ELSE
    v.words[word_idx].proc(@v);
  END
END execute_addr;

(* выполнить слово по адресу со стека ds - стек данных *)
PROCEDURE execute* (VAR v: e4vm_type.x4thPtr);
BEGIN
	v.ds_p := v.ds_p - 1;
	execute_addr(@v, v.ds[v.ds_p]);
END execute;

PROCEDURE add_core_words* (VAR v: e4vm_type.x4thPtr);
BEGIN
  e4vm_utils.add_core_word(@v, "quit",    quit,    FALSE);
  e4vm_utils.add_core_word(@v, "dolit",   do_lit,  FALSE);
  e4vm_utils.add_core_word(@v, "here",    get_here_addr, FALSE);
  e4vm_utils.add_core_word(@v, ",",       comma,   FALSE);
  e4vm_utils.add_core_word(@v, "branch",  branch,  FALSE);
  e4vm_utils.add_core_word(@v, "0branch", zbranch, FALSE);
  e4vm_utils.add_core_word(@v, "[",       lbrac,   TRUE);
  e4vm_utils.add_core_word(@v, "]",       rbrac,   FALSE);
  e4vm_utils.add_core_word(@v, "immediate", immediate, TRUE);
  e4vm_utils.add_core_word(@v, "execute", execute, FALSE);
END add_core_words;

BEGIN
   
END e4vm_core_ext.