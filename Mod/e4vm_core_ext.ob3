MODULE e4vm_core_ext;
IMPORT SYSTEM, C := Console, Platform, B := Basic,

e4vm_type, e4vm_utils, e4vm_core;

(*# нет операции *)
PROCEDURE quit* (VAR v: e4vm_type.x4thPtr);
BEGIN
  (* B.Quit; *) (* вроде бы не работает*)
END quit;


(*# Чтобы при интерпретации отличить числовую константу от адреса слова,
  # при компиляции перед каждой константой компилируется вызов слова doLit,
  # которое считывает следующее значение в памяти и размещает его на стеке данных.*)
PROCEDURE do_lit* (VAR v: e4vm_type.x4thPtr);
BEGIN
  (* C.WriteStrLn("do_lit!"); *)
  e4vm_utils.stack_ds_push(@v, v.mem[v.ip]);  
  v.ip := v.ip + 1;
END do_lit;


(*# поместит в стек данных адрес hereP.*)
PROCEDURE get_here_addr* (VAR v: e4vm_type.x4thPtr);
BEGIN
  e4vm_utils.stack_ds_push(@v, v.hereP);
END get_here_addr;


(*# Reserve data space for one cell and store w in the space.
  # просто положит в ячейку на hereP++ число из стека *)
PROCEDURE comma* (VAR v: e4vm_type.x4thPtr);
BEGIN
  (* C.WriteStrLn("comma"); *)
  v.ds_p := v.ds_p - 1;
	e4vm_utils.add_op(@v, v.ds[v.ds_p]);
END comma;

(*# переход по адресу в следующей ячейке *)
PROCEDURE branch* (VAR v: e4vm_type.x4thPtr);
BEGIN
 v.ip := v.mem[v.ip];
END branch;

(*# переход по адресу, если в топ ds 0. то есть false.
  # false - это все биты в ноле. true - это все биты одной ячейки(cell) в единице. *)
PROCEDURE zbranch* (VAR v: e4vm_type.x4thPtr);
BEGIN
  v.ds_p := v.ds_p - 1;
  IF v.ds[v.ds_p] = 0 THEN
    v.ip := v.mem[v.ip];
  ELSE
    v.ip := v.ip;
  END
END zbranch;

(* # войти в eval режим - eval = true *)
PROCEDURE lbrac* (VAR v: e4vm_type.x4thPtr);
BEGIN
  v.is_eval_mode := TRUE;
END lbrac;

(* # выйти из eval режима - eval = false *)
PROCEDURE rbrac* (VAR v: e4vm_type.x4thPtr);
BEGIN
  v.is_eval_mode := FALSE;
END rbrac;

(* # делаем последнее определенное слово immediate = true *)
PROCEDURE immediate* (VAR v: e4vm_type.x4thPtr);
BEGIN
	v.words[v.words_count - 1].immediate := TRUE;
END immediate;

(*# выполнить слово по указанному адресу*)
PROCEDURE execute_addr* (
  VAR v: e4vm_type.x4thPtr;
  word_address : e4vm_type.word_addr_type
);
VAR word_idx:INTEGER;
BEGIN
  word_idx := e4vm_utils.look_up_word_idx_by_address(@v, word_address);
  (* если слова нет в словаре - значит оно интерпретируется *)
  IF word_idx = -1 THEN
    v.ip := 0; v.wp := word_address;
    e4vm_core.do_list(@v);
    e4vm_core.do_next(@v);
  ELSE
    v.words[word_idx].proc(@v);
  END
END execute_addr;

(* выполнить слово по адресу со стека ds - стек данных *)
PROCEDURE execute* (VAR v: e4vm_type.x4thPtr);
BEGIN
	v.ds_p := v.ds_p - 1;
	execute_addr(@v, v.ds[v.ds_p]);
END execute;

(* # исполням слово *)
PROCEDURE interpreter_word* (
  VAR v: e4vm_type.x4thPtr;
  word: e4vm_type.word_string_type);
VAR word_address:INTEGER;
BEGIN
	word_address := e4vm_utils.look_up_word_address(@v, word);
	IF v.is_eval_mode THEN
	  (*# eval mode*)
	  (*# если это слово и оно определено - исполняем*)
	  IF ~(word_address = -1) THEN
	    execute_addr(@v, word_address);
	  ELSIF e4vm_utils.is_constant(word) THEN
	    (*# иначе, если это число - кладем на стек*)
	    e4vm_utils.stack_ds_push(@v, e4vm_utils.str2int(word));
	  ELSE
	    (*# иначе, это ошибка - такого слова нет и это не константа*)
			C.WriteStr("ERROR(1): undefined word "); C.WriteStrLn(word);
	  END;
	ELSE
		(*# program mode*)
		IF ~(word_address = -1) THEN
			IF (v.words[word_address].immediate) THEN
			  execute_addr(@v, word_address);
			ELSE
			  e4vm_utils.add_op(@v, word_address);
			END; 
	  ELSIF e4vm_utils.is_constant(word) THEN
	    (*# иначе, если это число - пишем в память dolit число*)
	    e4vm_utils.add_op_from_string(@v, "dolit");
	    e4vm_utils.add_op(@v, e4vm_utils.str2int(word));
	  ELSE
	    (*# иначе, это ошибка - такого слова нет и это не константа*)
			C.WriteStr("ERROR(2): undefined word "); C.WriteStrLn(word);
	  END;
	END;
END interpreter_word;

(*# читаем слова из буфера, пока они не кончились. и сполняем*)
PROCEDURE interpreter* (VAR v: e4vm_type.x4thPtr);
VAR t:BOOLEAN;
BEGIN
  t:=e4vm_utils.read_word(@v);
	WHILE t DO
		interpreter_word(@v, v.readed_word);
		t:=e4vm_utils.read_word(@v);
  END;
  C.WriteStrLn(" ok");
  B.PAUSE(10);
END interpreter;

(*EVAL выполнить выражение в строке*)
PROCEDURE eval* (VAR v: e4vm_type.x4thPtr; str:ARRAY e4vm_type.buffer_size OF CHAR);
VAR i:INTEGER;
BEGIN
  i:=0;
	WHILE ~(ORD(str[i])=0) DO
	  v.buffer[i] := str[i];
	  i:=i+1;
	  v.buffer[i] := CHR(0);
	END;
  v.buffer_idx := 0;
  interpreter(@v);
END eval;

PROCEDURE add_core_words* (VAR v: e4vm_type.x4thPtr);
BEGIN
  e4vm_utils.add_core_word(@v, "quit",    quit,    FALSE);
  e4vm_utils.add_core_word(@v, "dolit",   do_lit,  FALSE);
  e4vm_utils.add_core_word(@v, "here",    get_here_addr, FALSE);
  e4vm_utils.add_core_word(@v, ",",       comma,   FALSE);
  e4vm_utils.add_core_word(@v, "branch",  branch,  FALSE);
  e4vm_utils.add_core_word(@v, "0branch", zbranch, FALSE);
  e4vm_utils.add_core_word(@v, "[",       lbrac,   TRUE);
  e4vm_utils.add_core_word(@v, "]",       rbrac,   FALSE);
  e4vm_utils.add_core_word(@v, "immediate", immediate, TRUE);
  e4vm_utils.add_core_word(@v, "execute", execute, FALSE);
END add_core_words;

BEGIN
   
END e4vm_core_ext.