MODULE e4vm; (*$MAIN*)
IMPORT SYSTEM, C := Console, Platform, B := Basic, 

        e4vm_type ,
				e4vm_core,
				e4vm_utils,
	(*			e4vm_stack,
				e4vm_math,
				e4vm_boolean, *)
				e4vm_core_ext
;


VAR 

     vm_static: e4vm_type.x4th;
      	    vm: e4vm_type.x4thPtr;


(* Отладочная функция *)
PROCEDURE do_hello (VAR v : e4vm_type.x4thPtr);
BEGIN
  C.WriteStrLn("hello!");
END do_hello;

(*
PROCEDURE test1(VAR v: e4vm_type.x4thPtr);
BEGIN
  (* проверяется визуально. должно выполнить NoP hello nop*)
  e4vm_utils.init(@v);

	v.core[0] := e4vm_core.do_nop;
  v.core[1] := e4vm_core.do_next;
	v.core[2] := e4vm_core.do_list;
	v.core[3] := e4vm_core.do_exit;
	v.core[4] := do_hello;
	
	v.mem[0] := 0; 
	v.mem[1] := 1; 
	v.mem[2] := 2; 
	v.mem[3] := 3; 
	v.mem[4] := 4; 

	v.wp := 4;
	(* тестовая прогремма 1 *)
	v.mem[5] := 2; (* do_list *)
	v.mem[6] := 0; (* nop     *)
	v.mem[7] := 4; (* hello   *)
	v.mem[8] := 0; (* nop     *)
	v.mem[9] := 3; (* exit    *)
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);

	(* e4vm_utils.vm_stat(@v); *)
END test1;


PROCEDURE test2(VAR v: e4vm_type.x4thPtr);
BEGIN
  (* проверяется визуально. должно выполнить nop nop hello nop nop*)
  e4vm_utils.init(@v);

	v.core[0] := e4vm_core.do_nop;
  v.core[1] := e4vm_core.do_next;
	v.core[2] := e4vm_core.do_list;
	v.core[3] := e4vm_core.do_exit;
	v.core[4] := do_hello;
	
	v.mem[0] := 0; 
	v.mem[1] := 1; 
	v.mem[2] := 2; 
	v.mem[3] := 3; 
	v.mem[4] := 4; 

	v.wp := 7;
	(* тестовая прогремма 2 *)
	
	v.mem[ 5] := 2; (* do_list подпрограмма*)
	v.mem[ 6] := 4; (* hello   *)
	v.mem[ 7] := 3; (* exit    *)
	v.mem[ 8] := 2; (* do_list основная программа*)
	v.mem[ 9] := 0; (* nop     *)
	v.mem[10] := 0; (* nop     *)
	v.mem[11] := 4; (* вызов подпрограммы *)
	v.mem[12] := 0; (* nop     *)
	v.mem[13] := 0; (* nop     *)
	v.mem[14] := 3; (* exit    *)	
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
END test2;

PROCEDURE test_dolit(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("dolit ");
  e4vm_utils.init(@v);

	v.core[0] := e4vm_core.do_nop;
  v.core[1] := e4vm_core.do_next;
	v.core[2] := e4vm_core.do_list;
	v.core[3] := e4vm_core.do_exit;
	v.core[4] := do_hello;
	v.core[5] := do_lit;
	
	v.mem[0] := 0; 
	v.mem[1] := 1; 
	v.mem[2] := 2; 
	v.mem[3] := 3; 
	v.mem[4] := 4; 
	v.mem[5] := 5; 

	v.wp := 5;
	(* тестовая прогремма *)
	
	v.mem[ 6] := 2; (* do_list подпрограмма*)
	v.mem[ 7] := 5; (* dolit   *)
	v.mem[ 8] := 555; (* 555    *)
	v.mem[ 9] := 3; (* exit*)
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	IF v.ds[0] = 555 THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
END test_dolit;

PROCEDURE test_drop(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("drop ");
  e4vm_utils.init(@v);

	v.core[0] := e4vm_core.do_nop;
  v.core[1] := e4vm_core.do_next;
	v.core[2] := e4vm_core.do_list;
	v.core[3] := e4vm_core.do_exit;
	v.core[4] := e4vm_stack.drop;
	
	v.mem[0] := 0; 
	v.mem[1] := 1; 
	v.mem[2] := 2; 
	v.mem[3] := 3; 
	v.mem[4] := 4; 

	v.wp := 4;
	(* тестовая прогремма *)
	
	v.mem[ 5] := 2; (* do_list подпрограмма*)
	v.mem[ 6] := 4; (* drop   *)
	v.mem[ 7] := 3; (* exit*)
	
	stack_ds_push(@v, 1);
	stack_ds_push(@v, 2);
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [2, 1] -> [1] *)
	
	e4vm_utils.vm_stat(@v);
	
END test_drop;

PROCEDURE test_swap(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("swap ");
  e4vm_utils.init(@v);

	v.core[0] := e4vm_core.do_nop;
  v.core[1] := e4vm_core.do_next;
	v.core[2] := e4vm_core.do_list;
	v.core[3] := e4vm_core.do_exit;
	v.core[4] := e4vm_stack.swap;
	
	v.mem[0] := 0; 
	v.mem[1] := 1; 
	v.mem[2] := 2; 
	v.mem[3] := 3; 
	v.mem[4] := 4; 

	v.wp := 4;
	(* тестовая прогремма *)
	
	v.mem[ 5] := 2; (* do_list подпрограмма*)
	v.mem[ 6] := 4; (* swap   *)
	v.mem[ 7] := 3; (* exit*)
	
	stack_ds_push(@v, 1);
	stack_ds_push(@v, 2);
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [2, 1] -> [1, 2] *)
	
	e4vm_utils.vm_stat(@v);
	
		IF ((v.ds[0] = 2)&(v.ds[1] = 1))  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
	
END test_swap;

PROCEDURE test_dup(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("dup ");
  e4vm_utils.init(@v);

	v.core[0] := e4vm_core.do_nop;
  v.core[1] := e4vm_core.do_next;
	v.core[2] := e4vm_core.do_list;
	v.core[3] := e4vm_core.do_exit;
	v.core[4] := e4vm_stack.dup;
	
	v.mem[0] := 0; 
	v.mem[1] := 1; 
	v.mem[2] := 2; 
	v.mem[3] := 3; 
	v.mem[4] := 4; 

	v.wp := 4;
	(* тестовая прогремма *)
	
	v.mem[ 5] := 2; (* do_list подпрограмма*)
	v.mem[ 6] := 4; (* dup   *)
	v.mem[ 7] := 3; (* exit*)
	
	stack_ds_push(@v, 1);
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [1] -> [1, 1] *)
	
	e4vm_utils.vm_stat(@v);
	
		IF ((v.ds[0] = v.ds[1])&(v.ds[0] = 1)&(v.ds_p = 2))  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
	
END test_dup;

PROCEDURE test_over(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("over ");
  e4vm_utils.init(@v);

	v.core[0] := e4vm_core.do_nop;
  v.core[1] := e4vm_core.do_next;
	v.core[2] := e4vm_core.do_list;
	v.core[3] := e4vm_core.do_exit;
	v.core[4] := e4vm_stack.over;
	
	v.mem[0] := 0; 
	v.mem[1] := 1; 
	v.mem[2] := 2; 
	v.mem[3] := 3; 
	v.mem[4] := 4; 

	v.wp := 4;
	(* тестовая прогремма *)
	
	v.mem[ 5] := 2; (* do_list подпрограмма*)
	v.mem[ 6] := 4; (* over   *)
	v.mem[ 7] := 3; (* exit*)
	
	stack_ds_push(@v, 1);
	stack_ds_push(@v, 2);
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [1, 2] -> [1, 2, 1] *)
	
	e4vm_utils.vm_stat(@v);
	
		IF ((v.ds[0] = 1)&(v.ds[1] = 2)&(v.ds[2] = 1)&(v.ds_p = 3))  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
	
END test_over;

PROCEDURE test_rot(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("rot ");
  e4vm_utils.init(@v);

	v.core[0] := e4vm_core.do_nop;
  v.core[1] := e4vm_core.do_next;
	v.core[2] := e4vm_core.do_list;
	v.core[3] := e4vm_core.do_exit;
	v.core[4] := e4vm_stack.rot;
	
	v.mem[0] := 0; 
	v.mem[1] := 1; 
	v.mem[2] := 2; 
	v.mem[3] := 3; 
	v.mem[4] := 4; 

	v.wp := 4;
	(* тестовая прогремма *)
	
	v.mem[ 5] := 2; (* do_list подпрограмма*)
	v.mem[ 6] := 4; (* rot   *)
	v.mem[ 7] := 3; (* exit*)
	
	stack_ds_push(@v, 1);
	stack_ds_push(@v, 2);
	stack_ds_push(@v, 3);
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [1, 2, 3] -> [2, 3, 1] *)
	
	e4vm_utils.vm_stat(@v);
	
	IF ((v.ds[0] = 2)&(v.ds[1] = 3)&(v.ds[2] = 1))  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
END test_rot; 

PROCEDURE test_nrot(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("rot ");
  e4vm_utils.init(@v);

	v.core[0] := e4vm_core.do_nop;
  v.core[1] := e4vm_core.do_next;
	v.core[2] := e4vm_core.do_list;
	v.core[3] := e4vm_core.do_exit;
	v.core[4] := e4vm_stack.nrot;
	
	v.mem[0] := 0; 
	v.mem[1] := 1; 
	v.mem[2] := 2; 
	v.mem[3] := 3; 
	v.mem[4] := 4; 

	v.wp := 4;
	(* тестовая прогремма *)
	
	v.mem[ 5] := 2; (* do_list подпрограмма*)
	v.mem[ 6] := 4; (* nrot   *)
	v.mem[ 7] := 3; (* exit*)
	
	stack_ds_push(@v, 1);
	stack_ds_push(@v, 2);
	stack_ds_push(@v, 3);
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [1, 2, 3] -> [3, 1, 2] *)
	
	e4vm_utils.vm_stat(@v);
	
	IF ((v.ds[0] = 3)&(v.ds[1] = 1)&(v.ds[2] = 2))  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
END test_nrot;

PROCEDURE test_minus(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("math - ");
  e4vm_utils.init(@v);

	v.core[0] := e4vm_core.do_nop;
  v.core[1] := e4vm_core.do_next;
	v.core[2] := e4vm_core.do_list;
	v.core[3] := e4vm_core.do_exit;
	v.core[4] := e4vm_math.minus;
	
	v.mem[0] := 0; 
	v.mem[1] := 1; 
	v.mem[2] := 2; 
	v.mem[3] := 3; 
	v.mem[4] := 4; 

	v.wp := 4;
	(* тестовая прогремма *)
	
	v.mem[ 5] := 2; (* do_list подпрограмма*)
	v.mem[ 6] := 4; (* -   *)
	v.mem[ 7] := 3; (* exit*)
	
	stack_ds_push(@v, 1);
	stack_ds_push(@v, 2);
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [1, 2] -> [-1] *)
	
	e4vm_utils.vm_stat(@v);
	
	IF (v.ds[0] = -1)  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
END test_minus;

PROCEDURE test_devide(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("math / ");
  e4vm_utils.init(@v);

	v.core[0] := e4vm_core.do_nop;
  v.core[1] := e4vm_core.do_next;
	v.core[2] := e4vm_core.do_list;
	v.core[3] := e4vm_core.do_exit;
	v.core[4] := e4vm_math.devide;
	
	v.mem[0] := 0; 
	v.mem[1] := 1; 
	v.mem[2] := 2; 
	v.mem[3] := 3; 
	v.mem[4] := 4; 

	v.wp := 4;
	(* тестовая прогремма *)
	
	v.mem[ 5] := 2; (* do_list подпрограмма*)
	v.mem[ 6] := 4; (* /   *)
	v.mem[ 7] := 3; (* exit*)
	
	stack_ds_push(@v, 10);
	stack_ds_push(@v, 2);
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [10, 2] -> [5] *)
	
	e4vm_utils.vm_stat(@v);
	
	IF (v.ds[0] = 5)  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
END test_devide; 

PROCEDURE test_inc(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("math 1+ ");
  e4vm_utils.init(@v);

	v.core[0] := e4vm_core.do_nop;
  v.core[1] := e4vm_core.do_next;
	v.core[2] := e4vm_core.do_list;
	v.core[3] := e4vm_core.do_exit;
	v.core[4] := e4vm_math.inc;
	
	v.mem[0] := 0; 
	v.mem[1] := 1; 
	v.mem[2] := 2; 
	v.mem[3] := 3; 
	v.mem[4] := 4; 

	v.wp := 4;
	(* тестовая прогремма *)
	
	v.mem[ 5] := 2; (* do_list подпрограмма*)
	v.mem[ 6] := 4; (* 1+   *)
	v.mem[ 7] := 3; (* exit*)
	
	stack_ds_push(@v, 10);
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [10, 2] -> [5] *)
	
	e4vm_utils.vm_stat(@v);
	
	IF (v.ds[0] = 11)  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
END test_inc;

PROCEDURE test_true(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("true ");
  e4vm_utils.init(@v);

	v.core[0] := e4vm_core.do_nop;
  v.core[1] := e4vm_core.do_next;
	v.core[2] := e4vm_core.do_list;
	v.core[3] := e4vm_core.do_exit;
	v.core[4] := e4vm_boolean.true;
	
	v.mem[0] := 0; 
	v.mem[1] := 1; 
	v.mem[2] := 2; 
	v.mem[3] := 3; 
	v.mem[4] := 4; 

	v.wp := 4;
	(* тестовая прогремма *)
	
	v.mem[ 5] := 2; (* do_list подпрограмма*)
	v.mem[ 6] := 4; (* true   *)
	v.mem[ 7] := 3; (* exit*)
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [] -> [true] *)
	
	e4vm_utils.vm_stat(@v);
	
	IF (v.ds[0] = e4vm_utils.true_const(@vm))  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
END test_true;


PROCEDURE test_not(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("not ");
  e4vm_utils.init(@v);

	v.core[0] := e4vm_core.do_nop;
  v.core[1] := e4vm_core.do_next;
	v.core[2] := e4vm_core.do_list;
	v.core[3] := e4vm_core.do_exit;
	v.core[4] := e4vm_boolean.not;
	
	v.mem[0] := 0; 
	v.mem[1] := 1; 
	v.mem[2] := 2; 
	v.mem[3] := 3; 
	v.mem[4] := 4; 

	v.wp := 4;
	(* тестовая прогремма *)
	
	v.mem[ 5] := 2; (* do_list подпрограмма*)
	v.mem[ 6] := 4; (* not   *)
	v.mem[ 7] := 3; (* exit*)
	
	stack_ds_push(@v, e4vm_utils.true_const(@vm));
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [true] -> [false] *)
	
	IF (v.ds[0] = e4vm_utils.false_const(@vm))  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
	
	v.wp := 4;
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [false] -> [true] *)
	
  IF (v.ds[0] = e4vm_utils.true_const(@vm))  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
	
	v.ds[0] := 2;
  v.wp := 4;
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	(* должна быть ошибка *)
		
END test_not;


PROCEDURE test_invert(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("invert ");
  e4vm_utils.init(@v);

	v.core[0] := e4vm_core.do_nop;
  v.core[1] := e4vm_core.do_next;
	v.core[2] := e4vm_core.do_list;
	v.core[3] := e4vm_core.do_exit;
	v.core[4] := e4vm_boolean.invert;
	
	v.mem[0] := 0; 
	v.mem[1] := 1; 
	v.mem[2] := 2; 
	v.mem[3] := 3; 
	v.mem[4] := 4; 

	v.wp := 4;
	(* тестовая прогремма *)
	
	v.mem[ 5] := 2; (* do_list подпрограмма*)
	v.mem[ 6] := 4; (* invert   *)
	v.mem[ 7] := 3; (* exit*)
	
	stack_ds_push(@v, 15);
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [15] -> [-16] *)
	e4vm_utils.vm_stat(@v);
	
	IF (v.ds[0] = -16)  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
	
		
END test_invert;


PROCEDURE test_or(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("or ");
  e4vm_utils.init(@v);

	v.core[0] := e4vm_core.do_nop;
  v.core[1] := e4vm_core.do_next;
	v.core[2] := e4vm_core.do_list;
	v.core[3] := e4vm_core.do_exit;
	v.core[4] := e4vm_boolean.or;
	
	v.mem[0] := 0; 
	v.mem[1] := 1; 
	v.mem[2] := 2; 
	v.mem[3] := 3; 
	v.mem[4] := 4; 

	v.wp := 4;
	(* тестовая прогремма *)
	
	v.mem[ 5] := 2; (* do_list подпрограмма*)
	v.mem[ 6] := 4; (* or   *)
	v.mem[ 7] := 3; (* exit*)
	
	stack_ds_push(@v, 1);
	stack_ds_push(@v, 2);
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [1, 2] -> [3] *)
	e4vm_utils.vm_stat(@v);
	
	IF (v.ds[0] = 3)  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
	
		
END test_or;

PROCEDURE test_and(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("and ");
  e4vm_utils.init(@v);

	v.core[0] := e4vm_core.do_nop;
  v.core[1] := e4vm_core.do_next;
	v.core[2] := e4vm_core.do_list;
	v.core[3] := e4vm_core.do_exit;
	v.core[4] := e4vm_boolean.and;
	
	v.mem[0] := 0; 
	v.mem[1] := 1; 
	v.mem[2] := 2; 
	v.mem[3] := 3; 
	v.mem[4] := 4; 

	v.wp := 4;
	(* тестовая прогремма *)
	
	v.mem[ 5] := 2; (* do_list подпрограмма*)
	v.mem[ 6] := 4; (* and   *)
	v.mem[ 7] := 3; (* exit*)
	
	stack_ds_push(@v, 3);
	stack_ds_push(@v, 6);
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [3, 6] -> [2] *)
	e4vm_utils.vm_stat(@v);
	
	IF (v.ds[0] = 2)  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
	
		
END test_and;

PROCEDURE test_xor(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("xor ");
  e4vm_utils.init(@v);

	v.core[0] := e4vm_core.do_nop;
  v.core[1] := e4vm_core.do_next;
	v.core[2] := e4vm_core.do_list;
	v.core[3] := e4vm_core.do_exit;
	v.core[4] := e4vm_boolean.xor;
	
	v.mem[0] := 0; 
	v.mem[1] := 1; 
	v.mem[2] := 2; 
	v.mem[3] := 3; 
	v.mem[4] := 4; 

	v.wp := 4;
	(* тестовая прогремма *)
	
	v.mem[ 5] := 2; (* do_list подпрограмма*)
	v.mem[ 6] := 4; (* xor   *)
	v.mem[ 7] := 3; (* exit*)
	
	stack_ds_push(@v, 6);
	stack_ds_push(@v, 5);
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [6, 5] -> [3] *)
	e4vm_utils.vm_stat(@v);
	
	IF (v.ds[0] = 3)  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
	
		
END test_xor;
*)

PROCEDURE test_dolit(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("dolit test");
  e4vm_utils.init(@v);

	v.core[0] := e4vm_core.do_nop;
  v.core[1] := e4vm_core.do_next;
	v.core[2] := e4vm_core.do_list;
	v.core[3] := e4vm_core.do_exit;
	v.core[4] := e4vm_core_ext.do_lit;
	
	v.mem[0] := 0; 
	v.mem[1] := 1; 
	v.mem[2] := 2; 
	v.mem[3] := 3; 
	v.mem[4] := 4; 

	v.wp := 4;
	(* тестовая прогремма *)
	
	v.mem[ 5] := 2; (* do_list подпрограмма*)
	v.mem[ 6] := 4; (* do_lit   *)
	v.mem[ 7] := 555; (* 555*)
	v.mem[ 8] := 3; (* exit*)
	

	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [] -> [555] *)
	(* e4vm_utils.vm_stat(@v); *)
	
	IF (v.ds[0] = 555)  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
	
END test_dolit;

PROCEDURE test_here(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("here test");
  e4vm_utils.init(@v);

	v.core[0] := e4vm_core.do_nop;
  v.core[1] := e4vm_core.do_next;
	v.core[2] := e4vm_core.do_list;
	v.core[3] := e4vm_core.do_exit;
	v.core[4] := e4vm_core_ext.get_here_addr;
	
	v.mem[0] := 0; 
	v.mem[1] := 1; 
	v.mem[2] := 2; 
	v.mem[3] := 3; 
	v.mem[4] := 4; 

	v.wp := 4;
	(* тестовая прогремма *)
	
	v.mem[ 5] := 2; (* do_list подпрограмма*)
	v.mem[ 6] := 4; (* here   *)
	v.mem[ 7] := 3; (* exit*)
	
	v.hereP := 555;

	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [] -> [hereP] *)
	(* e4vm_utils.vm_stat(@v); *)
	
	IF (v.ds[0] = 555)  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
	
END test_here;

PROCEDURE test_comma(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("comma test");
  e4vm_utils.init(@v);

	v.core[0] := e4vm_core.do_nop;
  v.core[1] := e4vm_core.do_next;
	v.core[2] := e4vm_core.do_list;
	v.core[3] := e4vm_core.do_exit;
	v.core[4] := e4vm_core_ext.comma;
	
	v.mem[0] := 0; 
	v.mem[1] := 1; 
	v.mem[2] := 2; 
	v.mem[3] := 3; 
	v.mem[4] := 4; 

	v.wp := 4;
	(* тестовая прогремма *)
	
	v.mem[ 5] := 2; (* do_list подпрограмма*)
	v.mem[ 6] := 4; (* comma   *)
	v.mem[ 7] := 3; (* exit*)
	
	v.hereP := 18; 
	e4vm_utils.stack_ds_push(@v, 777);

	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	
	(*e4vm_utils.vm_stat(@v); *)
	
	IF (v.mem[18] = 777)  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
	
END test_comma;

PROCEDURE test_branch(VAR v: e4vm_type.x4thPtr);
VAR t:INTEGER;
BEGIN
  C.WriteStr("branch test");

  e4vm_utils.init(@v);

	v.core[0] := e4vm_core.do_nop;
  v.core[1] := e4vm_core.do_next;
	v.core[2] := e4vm_core.do_list;
	v.core[3] := e4vm_core.do_exit;
	v.core[4] := e4vm_core_ext.branch;
	v.core[5] := e4vm_core_ext.do_lit
	
	
	v.mem[0] := 0; 
	v.mem[1] := 1; 
	v.mem[2] := 2; 
	v.mem[3] := 3; 
	v.mem[4] := 4; 
	v.mem[5] := 5;

	v.wp := 5;
	(* тестовая прогремма *)
	
	v.mem[ 6] :=  2; (* do_list подпрограмма*)
	v.mem[ 7] :=  4; (* branch*)
	v.mem[ 8] := 12; (* adr 12*)
	v.mem[ 9] :=  5; (* lit   *)
	v.mem[10] :=  1; (* 1*)
	v.mem[11] :=  3; (* exit*)
	v.mem[12] :=  5; (* lit   *)
	v.mem[13] :=  2; (* 2*)
	v.mem[14] :=  3; (* exit*)
	

	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);

	(* e4vm_utils.vm_stat(@v); *)
	
	IF (v.ds[0] = 2)  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
	
END test_branch;

BEGIN
  B.Init;
  C.Clear(C.White);
  C.SetColors(C.BlackOnWhite);

  vm := SYSTEM.VAL(e4vm_type.x4thPtr, SYSTEM.ADR(vm_static));

	(* test1(@vm);
	test2(@vm);
  test_dolit(@vm);
	test_drop(@vm);
	test_swap(@vm);
	test_dup(@vm);
	test_over(@vm);
	test_rot(@vm); 
	test_nrot(@vm);
	test_minus(@vm);
	test_devide(@vm); 
	test_inc(@vm);
	test_true(@vm);
	test_not(@vm);
	test_invert(@vm);
	test_or(@vm);
	test_and(@vm);
	test_xor(@vm);


	*)
	
	test_dolit(@vm);
	test_here(@vm);
	test_comma(@vm);
	test_branch(@vm);


  (* B.PAUSE(0); *)
	B.Quit;
END e4vm.