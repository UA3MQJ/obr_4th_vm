MODULE e4vm; (*$MAIN*)
IMPORT SYSTEM, C := Console, Platform, B := Basic, 

        e4vm_type ,
				e4vm_core,
				e4vm_core_ext,
				e4vm_stack,
				e4vm_math,
				e4vm_boolean,
				e4vm_utils,
				e4vm_mem,
				e4vm_comment,
				e4vm_rw
;


VAR 

     vm_static: e4vm_type.x4th;
      	    vm: e4vm_type.x4thPtr;


(* Отладочная функция *)
PROCEDURE do_hello (VAR v : e4vm_type.x4thPtr);
BEGIN
  (* C.WriteStrLn("hello!"); *)
  v.mem[30] := 1;
END do_hello;

(*
PROCEDURE test1(VAR v: e4vm_type.x4thPtr);
BEGIN
  (* проверяется визуально. должно выполнить NoP hello nop*)
  C.WriteStr("e4vm_core test1 ");
  e4vm_utils.init(@v);
  e4vm_core.add_core_words(@v);
  e4vm_utils.add_core_word(@v, "hello", do_hello,  FALSE);


  e4vm_utils.add_op_from_string(@v, "dolist"); (* addr 5 *)
  e4vm_utils.add_op_from_string(@v, "hello");
  e4vm_utils.add_op_from_string(@v, "exit");
  e4vm_utils.add_op_from_string(@v, "dolist"); (* addr 8 *)
  e4vm_utils.add_op_from_string(@v, "nop");
  e4vm_utils.add_op(@v, 4);
  e4vm_utils.add_op_from_string(@v, "nop");
  e4vm_utils.add_op_from_string(@v, "exit");

  (* e4vm_utils.vm_stat(@v); *)

  v.wp := 8 ; (* и с 5 и с 8 должно отработать *)

  e4vm_core.do_list(@v);
  e4vm_core.do_next(@v);

	IF (v.mem[30] = 1)  THEN
	  C.WriteStr(" - ok");
	ELSE
	  C.WriteStr(" - error");
	END;
	C.WriteStrLn(" ");
END test1;


PROCEDURE test_dolit(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("Test dolit ");
  e4vm_utils.init(@v);
  e4vm_core.add_core_words(@v);
  e4vm_core_ext.add_core_words(@v);

	e4vm_utils.here_to_wp(@v);
	
	e4vm_utils.add_op_from_string(@v, "dolist");
  e4vm_utils.add_op_from_string(@v, "dolit");
  e4vm_utils.add_op(@v, 555);
  e4vm_utils.add_op_from_string(@v, "exit");
	
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	(* e4vm_utils.vm_stat(@v); *)
	
	IF v.ds[0] = 555 THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
END test_dolit;

PROCEDURE test_drop(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("Test drop ");
  e4vm_utils.init(@v);
  e4vm_core.add_core_words(@v);
  e4vm_stack.add_core_words(@v);
	
	e4vm_utils.here_to_wp(@v);
	e4vm_utils.add_op_from_string(@v, "dolist");
  e4vm_utils.add_op_from_string(@v, "drop");
  e4vm_utils.add_op_from_string(@v, "exit");
	
	e4vm_utils.stack_ds_push(@v, 1);
	e4vm_utils.stack_ds_push(@v, 2);
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [2, 1] -> [1] *)
	
	(* e4vm_utils.vm_stat(@v); *)
		IF v.ds[v.ds_p -1] = 1 THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
END test_drop;

PROCEDURE test_swap(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("Test swap ");
  e4vm_utils.init(@v);
  e4vm_core.add_core_words(@v);
  e4vm_stack.add_core_words(@v);
	
	e4vm_utils.here_to_wp(@v);
	e4vm_utils.add_op_from_string(@v, "dolist");
  e4vm_utils.add_op_from_string(@v, "swap");
  e4vm_utils.add_op_from_string(@v, "exit");
	
	e4vm_utils.stack_ds_push(@v, 1);
	e4vm_utils.stack_ds_push(@v, 2);
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [2, 1] -> [1, 2] *)
	
	(*e4vm_utils.vm_stat(@v);*)
	
	IF ((v.ds[0] = 2)&(v.ds[1] = 1))  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
	
END test_swap;

PROCEDURE test_dup(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("Test dup ");
  e4vm_utils.init(@v);
  e4vm_core.add_core_words(@v);
  e4vm_stack.add_core_words(@v);
	
	e4vm_utils.here_to_wp(@v);
	e4vm_utils.add_op_from_string(@v, "dolist");
  e4vm_utils.add_op_from_string(@v, "dup");
  e4vm_utils.add_op_from_string(@v, "exit");
	
	e4vm_utils.stack_ds_push(@v, 1);
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [1] -> [1, 1] *)
	
	(*e4vm_utils.vm_stat(@v);*)
	
		IF ((v.ds[0] = v.ds[1])&(v.ds[0] = 1)&(v.ds_p = 2))  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
END test_dup;

PROCEDURE test_over(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("Test over ");
  e4vm_utils.init(@v);
  e4vm_core.add_core_words(@v);
  e4vm_stack.add_core_words(@v);
	
	e4vm_utils.here_to_wp(@v);
	e4vm_utils.add_op_from_string(@v, "dolist");
  e4vm_utils.add_op_from_string(@v, "over");
  e4vm_utils.add_op_from_string(@v, "exit");
	
	e4vm_utils.stack_ds_push(@v, 1);
	e4vm_utils.stack_ds_push(@v, 2);
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [1, 2] -> [1, 2, 1] *)
	
	(* e4vm_utils.vm_stat(@v); *)
	
		IF ((v.ds[0] = 1)&(v.ds[1] = 2)&(v.ds[2] = 1)&(v.ds_p = 3))  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
	
END test_over;

PROCEDURE test_rot(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("Test rot ");
  e4vm_utils.init(@v);
  e4vm_core.add_core_words(@v);
  e4vm_stack.add_core_words(@v);
	
	e4vm_utils.here_to_wp(@v);
	e4vm_utils.add_op_from_string(@v, "dolist");
  e4vm_utils.add_op_from_string(@v, "rot");
  e4vm_utils.add_op_from_string(@v, "exit");
	
	e4vm_utils.stack_ds_push(@v, 1);
	e4vm_utils.stack_ds_push(@v, 2);
	e4vm_utils.stack_ds_push(@v, 3);
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [1, 2, 3] -> [2, 3, 1] *)
	
	(*e4vm_utils.vm_stat(@v);*)
	
	IF ((v.ds[0] = 2)&(v.ds[1] = 3)&(v.ds[2] = 1))  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
END test_rot; 

PROCEDURE test_nrot(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("Test nrot ");
  e4vm_utils.init(@v);
  e4vm_core.add_core_words(@v);
  e4vm_stack.add_core_words(@v);
	
	e4vm_utils.here_to_wp(@v);
	e4vm_utils.add_op_from_string(@v, "dolist");
  e4vm_utils.add_op_from_string(@v, "nrot");
  e4vm_utils.add_op_from_string(@v, "exit");
	
	e4vm_utils.stack_ds_push(@v, 1);
	e4vm_utils.stack_ds_push(@v, 2);
	e4vm_utils.stack_ds_push(@v, 3);
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [1, 2, 3] -> [3, 1, 2] *)
	
	(* e4vm_utils.vm_stat(@v); *)
	
	IF ((v.ds[0] = 3)&(v.ds[1] = 1)&(v.ds[2] = 2))  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
END test_nrot;

PROCEDURE test_minus(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("Test math -/+ ");
  e4vm_utils.init(@v);
  e4vm_core.add_core_words(@v);
  e4vm_math.add_core_words(@v);
	
	e4vm_utils.here_to_wp(@v);
	e4vm_utils.add_op_from_string(@v, "dolist");
  e4vm_utils.add_op_from_string(@v, "-");
  e4vm_utils.add_op_from_string(@v, "+");
  e4vm_utils.add_op_from_string(@v, "exit");
	
	e4vm_utils.stack_ds_push(@v, 1);
	e4vm_utils.stack_ds_push(@v, 20);
	e4vm_utils.stack_ds_push(@v, 3);
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [1, 2, 3] -> [18] *)
	(*e4vm_utils.vm_stat(@v);*)
	
	IF (v.ds[0] = 18)  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
END test_minus;

PROCEDURE test_mod(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("Test mod ");
  e4vm_utils.init(@v);
  e4vm_core.add_core_words(@v);
  e4vm_math.add_core_words(@v);
	
	e4vm_utils.here_to_wp(@v);
	e4vm_utils.add_op_from_string(@v, "dolist");
  e4vm_utils.add_op_from_string(@v, "mod");
  e4vm_utils.add_op_from_string(@v, "exit");
	
	e4vm_utils.stack_ds_push(@v, 10);
	e4vm_utils.stack_ds_push(@v, 3);
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [10, 3] -> [1] *)
	(*e4vm_utils.vm_stat(@v);*)
	
	IF (v.ds[v.ds_p-1] = 1)  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
END test_mod;

PROCEDURE test_devide(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("Test math /, * ");
  e4vm_utils.init(@v);
  e4vm_core.add_core_words(@v);
  e4vm_math.add_core_words(@v);
	
	e4vm_utils.here_to_wp(@v);
	e4vm_utils.add_op_from_string(@v, "dolist");
  e4vm_utils.add_op_from_string(@v, "/");
  e4vm_utils.add_op_from_string(@v, "*");
  e4vm_utils.add_op_from_string(@v, "exit");
	
	e4vm_utils.stack_ds_push(@v, 3);
	e4vm_utils.stack_ds_push(@v, 10);
	e4vm_utils.stack_ds_push(@v, 2);
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [3, 10, 2] -> [5] *)
	
	(*e4vm_utils.vm_stat(@v);*)
	
	IF (v.ds[0] = 15)  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
END test_devide; 

PROCEDURE test_inc(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("Test math 1+ 1-");
  e4vm_utils.init(@v);
  e4vm_core.add_core_words(@v);
  e4vm_stack.add_core_words(@v);
  e4vm_math.add_core_words(@v);
	
	e4vm_utils.here_to_wp(@v);
	e4vm_utils.add_op_from_string(@v, "dolist");
  e4vm_utils.add_op_from_string(@v, "1+");
  e4vm_utils.add_op_from_string(@v, "swap");
  e4vm_utils.add_op_from_string(@v, "1-");
  e4vm_utils.add_op_from_string(@v, "exit");
	
	e4vm_utils.stack_ds_push(@v, 10);
	e4vm_utils.stack_ds_push(@v, 20);
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [10, 2] -> [5] *)
	(*e4vm_utils.vm_stat(@v);*)
	
	IF ((v.ds[v.ds_p -1] = 9)&(v.ds[v.ds_p -2] = 21))  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
END test_inc;

PROCEDURE test_true(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("Test true ");
  e4vm_utils.init(@v);
  e4vm_core.add_core_words(@v);
  e4vm_boolean.add_core_words(@v);
	
	e4vm_utils.here_to_wp(@v);
	e4vm_utils.add_op_from_string(@v, "dolist");
  e4vm_utils.add_op_from_string(@v, "true");
  e4vm_utils.add_op_from_string(@v, "exit");
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [] -> [true] *)
	(*e4vm_utils.vm_stat(@v);*)
	
	IF (v.ds[v.ds_p-1] = e4vm_utils.true_const(@vm))  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
END test_true;


PROCEDURE test_not(VAR v: e4vm_type.x4thPtr);
VAR start_addr:INTEGER;
BEGIN
  C.WriteStr("Test not ");
  e4vm_utils.init(@v);
  e4vm_core.add_core_words(@v);
  e4vm_boolean.add_core_words(@v);
	

	start_addr := v.hereP;
	e4vm_utils.add_op_from_string(@v, "dolist");
  e4vm_utils.add_op_from_string(@v, "not");
  e4vm_utils.add_op_from_string(@v, "exit");
	
	e4vm_utils.stack_ds_push(@v, e4vm_utils.true_const(@vm));
	
	v.wp := start_addr;
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [true] -> [false] *)
	
	IF (v.ds[0] = e4vm_utils.false_const(@vm))  THEN
	  C.WriteStr(" - ok");
	ELSE
	  C.WriteStr(" - error");
	END;
	
	v.wp := start_addr;
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [false] -> [true] *)
	
  IF (v.ds[0] = e4vm_utils.true_const(@vm))  THEN
	  C.WriteStr(" - ok");
	ELSE
	  C.WriteStr(" - error");
	END;
	
	v.ds[0] := 2;
	
	v.wp := start_addr;
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	(* должна быть ошибка *)
	C.WriteStrLn(" - ok");
		
END test_not;


PROCEDURE test_invert(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("Test invert ");
  e4vm_utils.init(@v);
  e4vm_core.add_core_words(@v);
  e4vm_boolean.add_core_words(@v);
	
	e4vm_utils.here_to_wp(@v);
	e4vm_utils.add_op_from_string(@v, "dolist");
  e4vm_utils.add_op_from_string(@v, "invert");
  e4vm_utils.add_op_from_string(@v, "exit");
	
	e4vm_utils.stack_ds_push(@v, 15);
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [15] -> [-16] *)
	(*e4vm_utils.vm_stat(@v);*)
	
	IF (v.ds[v.ds_p-1] = -16)  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
END test_invert;


PROCEDURE test_or(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("Test or ");
  e4vm_utils.init(@v);
  e4vm_core.add_core_words(@v);
  e4vm_boolean.add_core_words(@v);
	
	e4vm_utils.here_to_wp(@v);
	e4vm_utils.add_op_from_string(@v, "dolist");
  e4vm_utils.add_op_from_string(@v, "or");
  e4vm_utils.add_op_from_string(@v, "exit");
	
	e4vm_utils.stack_ds_push(@v, 1);
	e4vm_utils.stack_ds_push(@v, 2);
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [1, 2] -> [3] *)
	(*e4vm_utils.vm_stat(@v);*)
	
	IF (v.ds[0] = 3)  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
END test_or;

PROCEDURE test_and(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("Test and ");
  e4vm_utils.init(@v);
  e4vm_core.add_core_words(@v);
  e4vm_boolean.add_core_words(@v);
	
	e4vm_utils.here_to_wp(@v);
	e4vm_utils.add_op_from_string(@v, "dolist");
  e4vm_utils.add_op_from_string(@v, "and");
  e4vm_utils.add_op_from_string(@v, "exit");
	
	e4vm_utils.stack_ds_push(@v, 3);
	e4vm_utils.stack_ds_push(@v, 6);
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [3, 6] -> [2] *)
	(*e4vm_utils.vm_stat(@v);*)
	
	IF (v.ds[0] = 2)  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
END test_and;

PROCEDURE test_xor(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("Test xor ");
  e4vm_utils.init(@v);
  e4vm_core.add_core_words(@v);
  e4vm_boolean.add_core_words(@v);
	
	e4vm_utils.here_to_wp(@v);
	e4vm_utils.add_op_from_string(@v, "dolist");
  e4vm_utils.add_op_from_string(@v, "xor");
  e4vm_utils.add_op_from_string(@v, "exit");
	
	e4vm_utils.stack_ds_push(@v, 6);
	e4vm_utils.stack_ds_push(@v, 5);
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [6, 5] -> [3] *)
	(*e4vm_utils.vm_stat(@v);*)
	
	IF (v.ds[0] = 3)  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
END test_xor;

PROCEDURE test_here(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("Test here ");
  e4vm_utils.init(@v);
  e4vm_core.add_core_words(@v);
  e4vm_core_ext.add_core_words(@v);
	
	e4vm_utils.here_to_wp(@v);
	e4vm_utils.add_op_from_string(@v, "dolist");
  e4vm_utils.add_op_from_string(@v, "here");
  e4vm_utils.add_op_from_string(@v, "exit");
	
	v.hereP := 555;

	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(* [] -> [hereP] *)
	(* e4vm_utils.vm_stat(@v); *)
	
	IF (v.ds[0] = 555)  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
	
END test_here;

PROCEDURE test_comma(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("Test comma , ");
  e4vm_utils.init(@v);
  e4vm_core.add_core_words(@v);
  e4vm_core_ext.add_core_words(@v);
	
	e4vm_utils.here_to_wp(@v);
	e4vm_utils.add_op_from_string(@v, "dolist");
  e4vm_utils.add_op_from_string(@v, ",");
  e4vm_utils.add_op_from_string(@v, "exit");
	
	v.hereP := 18; 
	e4vm_utils.stack_ds_push(@v, 777);

	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(*e4vm_utils.vm_stat(@v); *)
	
	IF (v.mem[18] = 777)  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
END test_comma;


PROCEDURE test_branch(VAR v: e4vm_type.x4thPtr);
VAR jmp_addr, i:INTEGER;
BEGIN
  C.WriteStr("Test branch ");
  e4vm_utils.init(@v);
  e4vm_core.add_core_words(@v);
  e4vm_core_ext.add_core_words(@v);
	
	e4vm_utils.here_to_wp(@v);
	e4vm_utils.add_op_from_string(@v, "dolist");
  e4vm_utils.add_op_from_string(@v, "nop");
  e4vm_utils.add_op_from_string(@v, "nop");
  e4vm_utils.add_op_from_string(@v, "nop");
  e4vm_utils.add_op_from_string(@v, "branch");
  e4vm_utils.add_op(@v, 77);
  e4vm_utils.add_op_from_string(@v, "dolit");
  e4vm_utils.add_op(@v, 1);
  e4vm_utils.add_op_from_string(@v, "exit");
  jmp_addr := v.hereP;
  e4vm_utils.add_op_from_string(@v, "dolit");
  e4vm_utils.add_op(@v, 2);
  e4vm_utils.add_op_from_string(@v, "exit");
	
	FOR i:=0 TO (e4vm_type.mem_size-1) DO
	  IF (v.mem[i]=77) THEN
	    v.mem[i]:=jmp_addr;
	  END;
	END;

	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);

	(* e4vm_utils.vm_stat(@v);*)
	
	IF (v.ds[v.ds_p-1] = 2)  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
	
END test_branch;

PROCEDURE test_zbranch(VAR v: e4vm_type.x4thPtr);
VAR jmp_addr, i:INTEGER;
VAR start_addr:INTEGER;
BEGIN
  C.WriteStr("Test 0branch ");
  e4vm_utils.init(@v);
  e4vm_core.add_core_words(@v);
  e4vm_core_ext.add_core_words(@v);
	
	e4vm_utils.here_to_wp(@v);
	start_addr := v.hereP;
	e4vm_utils.add_op_from_string(@v, "dolist");
  e4vm_utils.add_op_from_string(@v, "nop");
  e4vm_utils.add_op_from_string(@v, "nop");
  e4vm_utils.add_op_from_string(@v, "nop");
  e4vm_utils.add_op_from_string(@v, "0branch");
  e4vm_utils.add_op(@v, 77);
  e4vm_utils.add_op_from_string(@v, "dolit");
  e4vm_utils.add_op(@v, 1);
  e4vm_utils.add_op_from_string(@v, "exit");
  jmp_addr := v.hereP;
  e4vm_utils.add_op_from_string(@v, "dolit");
  e4vm_utils.add_op(@v, 2);
  e4vm_utils.add_op_from_string(@v, "exit");
	
	FOR i:=0 TO (e4vm_type.mem_size-1) DO
	  IF (v.mem[i]=77) THEN
	    v.mem[i]:=jmp_addr;
	  END;
	END;
	
	e4vm_utils.stack_ds_push(@v, 0);
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);

	(* e4vm_utils.vm_stat(@v);*)
	
	IF (v.ds[v.ds_p-1] = 2)  THEN
	  C.WriteStr(" - ok");
	ELSE
	  C.WriteStr(" - error");
	END;
	
	v.wp := start_addr;
	e4vm_utils.stack_ds_push(@v, 1);
	
  e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);

	(* e4vm_utils.vm_stat(@v);*)
	
	IF (v.ds[v.ds_p-1] = 1)  THEN
	  C.WriteStr(" - ok");
	ELSE
	  C.WriteStr(" - error");
	END;
	
END test_zbranch;

PROCEDURE test_immediate(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("Test immediate ");
  e4vm_utils.init(@v);
  e4vm_core.add_core_words(@v);
  e4vm_core_ext.add_core_words(@v);
  e4vm_utils.add_core_word(@v, "hello", do_hello,  FALSE);
	
	e4vm_utils.here_to_wp(@v);
	e4vm_utils.add_op_from_string(@v, "dolist");
  e4vm_utils.add_op_from_string(@v, "immediate");
  e4vm_utils.add_op_from_string(@v, "exit");
	
	v.hereP := 18; 
	e4vm_utils.stack_ds_push(@v, 777);

	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(*e4vm_utils.vm_stat(@v); *)
	
	IF (v.words[v.words_count-1].immediate = TRUE)  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
END test_immediate;

PROCEDURE test_execute1(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("Test execute from core ");
  e4vm_utils.init(@v);
  e4vm_core.add_core_words(@v);
  e4vm_core_ext.add_core_words(@v);
  e4vm_utils.add_core_word(@v, "hello", do_hello,  FALSE);
	
	e4vm_utils.here_to_wp(@v);
	e4vm_utils.add_op_from_string(@v, "dolist");
  e4vm_utils.add_op_from_string(@v, "execute");
  e4vm_utils.add_op_from_string(@v, "exit");
	

	e4vm_utils.stack_ds_push(
	  @v,
	  e4vm_utils.look_up_word_address(@vm, "hello"));
	
	v.mem[30] := 0;

	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	(*e4vm_utils.vm_stat(@v);*)
	
	IF (v.mem[30] = 1)  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
END test_execute1; 

PROCEDURE test_isconstant(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStrLn("Test test_isconstant ");
	
	IF (e4vm_utils.is_digit("9"))  THEN
	  C.WriteStrLn("is_digit 1 - ok");
	ELSE
	  C.WriteStrLn("is_digit 1 - error");
	END;
	
	IF (e4vm_utils.is_constant("90"))  THEN
	  C.WriteStrLn("is_constant 90 - ok");
	ELSE
	  C.WriteStrLn("is_constant 90 - error");
	END;
	
	IF (e4vm_utils.is_constant("+90"))  THEN
	  C.WriteStrLn("is_constant +90 - ok");
	ELSE
	  C.WriteStrLn("is_constant +90 - error");
	END;
	
	IF (e4vm_utils.is_constant("-90"))  THEN
	  C.WriteStrLn("is_constant -90 - ok");
	ELSE
	  C.WriteStrLn("is_constant -90 - error");
	END;
	
	IF (e4vm_utils.is_constant("as"))  THEN
	  C.WriteStrLn("is_constant as - ok");
	ELSE
	  C.WriteStrLn("is_constant as - error");
	END;
	
	IF (e4vm_utils.str2int("12345")=12345)  THEN
	  C.WriteStrLn("str2int pos - ok");
	ELSE
	  C.WriteStrLn("str2int pos - error");
	END;
	
	IF (e4vm_utils.str2int("-12345")=-12345)  THEN
	  C.WriteStrLn("str2int neg - ok");
	ELSE
	  C.WriteStrLn("str2int neg - error");
	END;
	
END test_isconstant;

PROCEDURE test_interpreter_word(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStrLn("Test interpreter_word ");
  e4vm_utils.init(@v);
  e4vm_core.add_core_words(@v);
  e4vm_core_ext.add_core_words(@v);
  e4vm_utils.add_core_word(@v, "hello", do_hello,  FALSE);
  e4vm_utils.add_core_word(@v, "hello_imm", do_hello,  TRUE);
	

	
	v.mem[30] := 0;
	e4vm_core_ext.interpreter_word(@v, "hello");
	
	IF (v.mem[30] = 1)  THEN
	  C.WriteStrLn(" is_eval_mode word - ok");
	ELSE
	  C.WriteStrLn(" is_eval_mode word  - error");
	END;
	
	e4vm_core_ext.interpreter_word(@v, "123");
	IF (v.ds[v.ds_p-1] = 123)  THEN
	  C.WriteStrLn(" is_eval_mode const - ok");
	ELSE
	  C.WriteStrLn(" is_eval_mode const  - error");
	END;
	
	v.is_eval_mode := FALSE;
	
	e4vm_core_ext.interpreter_word(@v, "123");
	IF ((v.mem[v.hereP-1] = 123)&(v.mem[v.hereP-2] = e4vm_utils.look_up_word_address(@v, "dolit")))  THEN
	  C.WriteStrLn(" program mode const - ok");
	ELSE
	  C.WriteStrLn(" program mode const  - error");
	END;
	
	v.mem[30] := 0;
	e4vm_core_ext.interpreter_word(@v, "hello_imm");
	IF (v.mem[30] = 1)  THEN
	  C.WriteStrLn(" program mode imm word - ok");
	ELSE
	  C.WriteStrLn(" program mode imm word  - error");
	END;
	
	v.mem[30] := 0;
	e4vm_core_ext.interpreter_word(@v, "hello");
	IF ((v.mem[30] = 0)&(v.mem[v.hereP-1] = e4vm_utils.look_up_word_address(@v, "hello")))  THEN
	  C.WriteStrLn(" program mode word - ok");
	ELSE
	  C.WriteStrLn(" program mode word  - error");
	END;
	
	(*e4vm_utils.vm_stat(@v);*)

END test_interpreter_word; *)

(*
PROCEDURE test_read_char2(VAR v: e4vm_type.x4thPtr);
VAR t:INTEGER; ch: SYSTEM.BYTE; c: CHAR;
BEGIN
  C.WriteStr("read_char test ");

  e4vm_utils.init(@v);

	ch:=e4vm_utils.read_char(@v);
	
	C.WriteInt(ch); C.WriteCh(CHR(ch));
	C.WriteStr(" - ok");
END test_read_char;

PROCEDURE test_read_string2(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("read_string test ");

	e4vm_utils.read_string(@v);
	C.WriteStrLn(v.in_string);
	C.WriteStr(" - ok");
END test_read_string;

PROCEDURE test_read_char(VAR v: e4vm_type.x4thPtr);
VAR t:INTEGER; ch: SYSTEM.BYTE; c: CHAR;
BEGIN
  C.WriteStr("read_char test ");

  e4vm_utils.init(@v);

  v.buffer[0]:="a";
  v.buffer[1]:="b";

	IF ((e4vm_utils.read_char(@v)="a")&(e4vm_utils.read_char(@v)="b")&(e4vm_utils.read_char(@v)=CHR(0))&(e4vm_utils.read_char(@v)=CHR(0)))  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;;
END test_read_char;

PROCEDURE test_read_word(VAR v: e4vm_type.x4thPtr);
VAR t:BOOLEAN;
BEGIN
  C.WriteStr("read_word test ");

  e4vm_utils.init(@v);

  v.buffer := "   some  len     string ";
  v.buffer_idx := 0;

  t:=e4vm_utils.read_word(@v);

	IF ((t)&(v.readed_word = "some"))  THEN
	  C.WriteStrLn("2 - ok");
	ELSE
	  C.WriteStrLn("2 - error");
	  C.WriteStr("'");
	  C.WriteStr(v.readed_word);
	  C.WriteStrLn("'");
	END;
	
	
  t:=e4vm_utils.read_word(@v);

	IF ((t)&(v.readed_word = "len"))  THEN
	  C.WriteStrLn("3 - ok");
	ELSE
	  C.WriteStrLn("3 - error");
	  C.WriteStr("'");
	  C.WriteStr(v.readed_word);
	  C.WriteStrLn("'");
	END;

	t:=e4vm_utils.read_word(@v);

	IF ((t)&(v.readed_word = "string"))  THEN
	  C.WriteStrLn("4 - ok");
	ELSE
	  C.WriteStrLn("4 - error");
	  C.WriteStr("'");
	  C.WriteStr(v.readed_word);
	  C.WriteStrLn("'");
	END;
	
	t:=e4vm_utils.read_word(@v);
	
	IF (~(t))  THEN
	  C.WriteStrLn("5 - ok");
	ELSE
	  C.WriteStrLn("5 - error");
	END;
END test_read_word;

PROCEDURE test_interpreter(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("interpreter test ");

  e4vm_utils.init(@v);
  e4vm_core.add_core_words(@v);
  e4vm_core_ext.add_core_words(@v);
	
  v.buffer := "1  2 3 ";
  v.buffer_idx := 0;

	e4vm_core_ext.interpreter(@v);

	IF (v.ds[v.ds_p-1]=3)&(v.ds[v.ds_p-2]=2)&(v.ds[v.ds_p-3]=1)  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
END test_interpreter;

PROCEDURE test_eval(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("eval test ");

  e4vm_utils.init(@v);
  e4vm_core.add_core_words(@v);
  e4vm_core_ext.add_core_words(@v);
	
  v.buffer := "1  2 3 ";
  v.buffer_idx := 0;

	e4vm_core_ext.eval(@v, "1  2 3 ");

	IF (v.ds[v.ds_p-1]=3)&(v.ds[v.ds_p-2]=2)&(v.ds[v.ds_p-3]=1)  THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
END test_eval;

PROCEDURE test_math_evals(
 VAR v: e4vm_type.x4thPtr;
 true_res: INTEGER
);
BEGIN
  v.buffer_idx := 0;

  C.WriteStr(v.buffer); C.WriteStr(" -> ");
	e4vm_core_ext.interpreter(@v);

	IF (v.ds[v.ds_p-1]=true_res)  THEN
	  C.WriteInt(v.ds[v.ds_p-1]);
	  C.WriteStrLn(" - ok");
	ELSE
		C.WriteInt(v.ds[v.ds_p-1]);
	  C.WriteStrLn(" - error");
	END;
END test_math_evals;

PROCEDURE test_math_eval(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStrLn("eval math test ");

  e4vm_utils.init(@v);
  e4vm_core.add_core_words(@v);
  e4vm_core_ext.add_core_words(@v);
	e4vm_math.add_core_words(@v);
	
	v.buffer := "10 2 -"; test_math_evals(@v, 8)
	v.buffer := "4 10 -"; test_math_evals(@v, -6)
	v.buffer := "4 10 +"; test_math_evals(@v, 14)
  v.buffer := "10 2 *"; test_math_evals(@v, 20)
  v.buffer := "10 2 /"; test_math_evals(@v, 5)
  v.buffer := "10 2 mod"; test_math_evals(@v, 0)
  v.buffer := "10 1+"; test_math_evals(@v, 11)
  v.buffer := "10 1-"; test_math_evals(@v, 9)
END test_math_eval;

PROCEDURE test_rw_eval(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStrLn("rw test ");

  e4vm_utils.init(@v);
  e4vm_core.add_core_words(@v);
  e4vm_core_ext.add_core_words(@v);
	e4vm_math.add_core_words(@v);
	e4vm_rw.add_core_words(@v);
	
	v.buffer := "10 2 - ."; v.buffer_idx := 0;
	e4vm_core_ext.interpreter(@v);
	
	v.buffer := "1 2 3 . . ."; v.buffer_idx := 0;
	e4vm_core_ext.interpreter(@v);
	
	v.buffer := "10 20 30 .s"; v.buffer_idx := 0;
	e4vm_core_ext.interpreter(@v);
	
	v.buffer := "cr 5 6 7 . cr . cr . cr"; v.buffer_idx := 0;
	e4vm_core_ext.interpreter(@v);

	v.buffer := "cr 5 6 7 . bl . bl . bl"; v.buffer_idx := 0;
	e4vm_core_ext.interpreter(@v);

END test_rw_eval; *)

PROCEDURE test_console(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteLn;

  e4vm_utils.init(@v);
	e4vm_core.add_core_words(@vm);
	e4vm_core_ext.add_core_words(@vm);
	e4vm_stack.add_core_words(@vm);
	e4vm_math.add_core_words(@vm);
	e4vm_boolean.add_core_words(@vm);
	e4vm_comment.add_core_words(@vm);
	e4vm_mem.add_core_words(@vm);
	e4vm_rw.add_core_words(@vm);
	
	WHILE (TRUE) DO
	  (*v.buffer := "10 2 - ."; v.buffer_idx := 0;*)
	  C.WriteStr(">");
	  e4vm_utils.keyboard_read_string(@vm);
	  C.WriteLn;
	  e4vm_core_ext.interpreter(@v);
	END;

END test_console;

BEGIN
  B.Init;
  C.Clear(C.White);
  C.SetColors(C.BlackOnWhite);

  vm := SYSTEM.VAL(e4vm_type.x4thPtr, SYSTEM.ADR(vm_static));

(*
	test1(@vm);
  test_dolit(@vm);
  test_drop(@vm);
	test_swap(@vm);
	test_dup(@vm);
	test_over(@vm);
	test_rot(@vm); 
	test_nrot(@vm);
	test_minus(@vm);
	test_devide(@vm); 
	test_inc(@vm);
	test_mod(@vm);
	
	test_true(@vm);
	test_not(@vm);
	test_invert(@vm);
  test_or(@vm);
	test_and(@vm);
	test_xor(@vm);
	
  test_here(@vm);
	test_comma(@vm);

	test_branch(@vm);
	test_zbranch(@vm);

  test_read_char2(@vm);
  test_read_string2(@vm);
  test_immediate(@vm);

  test_immediate(@vm);
  test_execute1(@vm); 

  test_isconstant(@vm);
  test_interpreter_word(@vm);

  test_read_char(@vm);
  test_read_word(@vm);
  test_interpreter(@vm);

  test_eval(@vm);
  test_math_eval(@vm);
  test_rw_eval(@vm); *)

	
	test_console(@vm);

  B.PAUSE(0);
	B.Quit;
END e4vm.