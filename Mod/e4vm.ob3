MODULE e4vm; (*$MAIN*)
IMPORT SYSTEM, C := Console, Platform, B := Basic, 

        e4vm_type ,
				e4vm_core,
				e4vm_utils
;


VAR 

     vm_static: e4vm_type.x4th;
      	    vm: e4vm_type.x4thPtr;


PROCEDURE stack_ds_push(x:INTEGER);
BEGIN
  vm.ds[vm.ds_p]:=x; vm.ds_p := vm.ds_p + 1;
END stack_ds_push;

PROCEDURE stack_rs_push(x:INTEGER);
BEGIN
  vm.rs[vm.rs_p]:=x; vm.rs_p := vm.rs_p + 1;
END stack_rs_push;

(*# Чтобы при интерпретации отличить числовую константу от адреса слова,
  # при компиляции перед каждой константой компилируется вызов слова doLit,
  # которое считывает следующее значение в памяти и размещает его на стеке данных.*)
PROCEDURE do_lit(VAR v: e4vm_type.x4thPtr);
BEGIN
  v.ip := v.ip + 1;
  stack_ds_push(v.mem[v.ip]);
END do_lit;

(* Отладочная функция *)
PROCEDURE do_hello (VAR v : e4vm_type.x4thPtr);
BEGIN
  C.WriteStrLn("hello!");
END do_hello;


PROCEDURE test1(VAR v: e4vm_type.x4thPtr);
BEGIN
  (* проверяется визуально. должно выполнить NoP hello nop*)
  e4vm_utils.init(@v);

	v.core[0] := e4vm_core.do_nop;
  v.core[1] := e4vm_core.do_next;
	v.core[2] := e4vm_core.do_list;
	v.core[3] := e4vm_core.do_exit;
	v.core[4] := do_hello;
	
	v.mem[0] := 0; 
	v.mem[1] := 1; 
	v.mem[2] := 2; 
	v.mem[3] := 3; 
	v.mem[4] := 4; 

	v.wp := 4;
	(* тестовая прогремма 1 *)
	v.mem[5] := 2; (* do_list *)
	v.mem[6] := 0; (* nop     *)
	v.mem[7] := 4; (* hello   *)
	v.mem[8] := 0; (* nop     *)
	v.mem[9] := 3; (* exit    *)
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);

	(* e4vm_utils.vm_stat(@v); *)
END test1;


PROCEDURE test2(VAR v: e4vm_type.x4thPtr);
BEGIN
  (* проверяется визуально. должно выполнить nop nop hello nop nop*)
  e4vm_utils.init(@v);

	v.core[0] := e4vm_core.do_nop;
  v.core[1] := e4vm_core.do_next;
	v.core[2] := e4vm_core.do_list;
	v.core[3] := e4vm_core.do_exit;
	v.core[4] := do_hello;
	
	v.mem[0] := 0; 
	v.mem[1] := 1; 
	v.mem[2] := 2; 
	v.mem[3] := 3; 
	v.mem[4] := 4; 

	v.wp := 7;
	(* тестовая прогремма 2 *)
	
	v.mem[ 5] := 2; (* do_list подпрограмма*)
	v.mem[ 6] := 4; (* hello   *)
	v.mem[ 7] := 3; (* exit    *)
	v.mem[ 8] := 2; (* do_list основная программа*)
	v.mem[ 9] := 0; (* nop     *)
	v.mem[10] := 0; (* nop     *)
	v.mem[11] := 4; (* вызов подпрограммы *)
	v.mem[12] := 0; (* nop     *)
	v.mem[13] := 0; (* nop     *)
	v.mem[14] := 3; (* exit    *)	
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
END test2;

PROCEDURE test_dolit(VAR v: e4vm_type.x4thPtr);
BEGIN
  C.WriteStr("dolit ");
  e4vm_utils.init(@v);

	v.core[0] := e4vm_core.do_nop;
  v.core[1] := e4vm_core.do_next;
	v.core[2] := e4vm_core.do_list;
	v.core[3] := e4vm_core.do_exit;
	v.core[4] := do_hello;
	v.core[5] := do_lit;
	
	v.mem[0] := 0; 
	v.mem[1] := 1; 
	v.mem[2] := 2; 
	v.mem[3] := 3; 
	v.mem[4] := 4; 
	v.mem[5] := 5; 

	v.wp := 5;
	(* тестовая прогремма *)
	
	v.mem[ 6] := 2; (* do_list подпрограмма*)
	v.mem[ 7] := 5; (* dolit   *)
	v.mem[ 8] := 555; (* 555    *)
	v.mem[ 9] := 3; (* exit*)
	
	e4vm_core.do_list(@v);
	e4vm_core.do_next(@v);
	
	IF v.ds[0] = 555 THEN
	  C.WriteStrLn(" - ok");
	ELSE
	  C.WriteStrLn(" - error");
	END;
END test_dolit;

BEGIN
  B.Init;
  C.Clear(C.White);
  C.SetColors(C.BlackOnWhite);

  vm := SYSTEM.VAL(e4vm_type.x4thPtr, SYSTEM.ADR(vm_static));

	(* test1(@vm); *)
	(* test2(@vm); *)
	
  test_dolit(@vm);

  B.PAUSE(0);
	B.Quit;
END e4vm.