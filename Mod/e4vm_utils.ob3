MODULE e4vm_utils;
IMPORT SYSTEM, C := Console, Platform, B := Basic, 

        e4vm_type,
        e4vm_core
;

PROCEDURE init* (VAR v: e4vm_type.x4thPtr);
VAR i: INTEGER;
BEGIN
  v.ip := 0;
	v.wp := 0;
	v.hereP := 0;
	v.cell_bit_size := e4vm_type.alu_bit_width;
	v.is_eval_mode := TRUE;
	FOR i:=0 TO (e4vm_type.mem_size-1) DO
	  v.mem[i] := 0;
	END;
	 FOR i:=0 TO (e4vm_type.core_size-1) DO
	  v.core[i] := e4vm_core.do_nop;
	END;
	FOR i:=0 TO (e4vm_type.stack_size-1) DO
	  v.rs[i] := 0; v.ds[i] := 0;
	END;
END init;

PROCEDURE vm_stat* (VAR v: e4vm_type.x4thPtr);
VAR i: INTEGER;
BEGIN
  C.WriteStr("ip:"); C.WriteInt(v.ip);
  C.WriteStr(" wp:"); C.WriteInt(v.wp);
  C.WriteStr(" hereP:"); C.WriteInt(v.hereP);
  C.WriteStrLn(" "); (*
  C.WriteStr("rs_p:"); C.WriteInt(v.rs_p); C.WriteStrLn(" ");
	C.WriteStrLn("rs: ["); FOR i:=0 TO (e4vm_type.stack_size-1) DO
	  C.WriteInt(v.rs[i]); C.WriteStr(" ");
	END; C.WriteStrLn("]"); *)
	C.WriteStr("ds_p:"); C.WriteInt(v.ds_p); C.WriteStrLn(" ");
	C.WriteStrLn("ds: ["); FOR i:=0 TO (e4vm_type.stack_size-1) DO
	  C.WriteInt(v.ds[i]); C.WriteStr(" ");
	END; C.WriteStrLn("]");
END vm_stat;

PROCEDURE true_const* (VAR v: e4vm_type.x4thPtr) : e4vm_type.stack_type;
BEGIN
  RETURN -1;
END true_const;

PROCEDURE false_const* (VAR v: e4vm_type.x4thPtr) : e4vm_type.stack_type;
BEGIN
  RETURN 0;
END false_const;

PROCEDURE error* (err:ARRAY OF CHAR);
BEGIN
  C.WriteStr("Error: "); C.WriteStr(err);C.WriteStrLn("");
END error;

PROCEDURE stack_ds_push* (VAR v: e4vm_type.x4thPtr; x:e4vm_type.stack_type);
BEGIN
  v.ds[v.ds_p]:=x; v.ds_p := v.ds_p + 1;
END stack_ds_push;

PROCEDURE stack_rs_push* (VAR v: e4vm_type.x4thPtr; x:e4vm_type.stack_type);
BEGIN
  v.rs[v.rs_p]:=x; v.rs_p := v.rs_p + 1;
END stack_rs_push;
	
END e4vm_utils.